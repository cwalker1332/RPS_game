import java.util.Random;
import java.util.Scanner;

public class Game {
    // initialize variables
    static int score = 0;
    static int compScore = 0;
    static int roundsWon = 0;
    static int roundsLost = 0;
    static Scanner scanner = new Scanner(System.in);

    // create method to start game
    public static int startGame() {
        // instruct user to choose rock, paper, or scissors
        System.out.println("Pick rock, paper, or scissors :)\n" +
                "1. Rock\n" +
                "2. Paper\n" +
                "3. Scissors");

        // create a variable to hold the user response using the Scanner object
        // the response needs to be an integer between 1-3 (1 = Rock, 2 = Paper, 3 = Scissors)
        int response = scanner.nextInt();

        switch (response) {
            case 1:
                System.out.println("You chose: Rock");
                break;
            case 2:
                System.out.println("You chose: Paper");
                break;
            case 3:
                System.out.println("You chose: Scissors");
                break;
            default:
                System.out.println("Invalid response. Please enter 1, 2, or 3");
                startGame();
        }

        // create a variable to hold the cpu response generated by the getCPUResponse() method
        int cpuResponse = getCPUResponse();

        switch (cpuResponse) {
            case 1:
                System.out.println("The computer chose: Rock");
                break;
            case 2:
                System.out.println("The computer chose: Paper");
                break;
            case 3:
                System.out.println("The computer chose: Scissors");
                break;
        }

        // compare user and cpu response with each other to decide the winner.

        // if user chooses rock
        switch (response) {
            case 1:
                // call on rock class if user chooses rock
                Rock rock = new Rock(cpuResponse);
                rock.checkOutcome();

                // if user loses, increase computer's score
                if (rock.checkOutcome() == 0) {
                    compScore++;
                    System.out.println("\nNuggets! The computer won!\n" +
                            "Your score is: " + score + "\n" +
                            "The computer's score is: " + compScore + "\n");

                    // give user option to start another game when computer wins three rounds
                    if (compScore == 3) {
                        userLose();
                    }
                // if user wins, increase score
                } else if (rock.checkOutcome() == 1) {
                    score++;
                    System.out.println("\nGood job! You won!\n" +
                            "Your score is: " + score + "\n" +
                            "The computer's score is: " + compScore + "\n");

                    // give user option to start another game when they win three rounds
                    if(score == 3){
                        userWin();
                    }
                // if user ties with computer, start another round using tie() method
                } else {
                    tie();
                }
                break;
            case 2:
                // call on paper class if user chooses paper
                Paper paper = new Paper(cpuResponse);
                paper.checkOutcome();

                // if user loses, increase computer's score
                if (paper.checkOutcome() == 0) {
                    compScore++;
                    System.out.println("\nNuggets! The computer won!\n" +
                            "Your score is: " + score + "\n" +
                            "The computer's score is: " + compScore + "\n");

                    // give user option to start another game when the computer wins three rounds
                    if (compScore == 3) {
                        userLose();
                    }
                // if user wins, increase score
                } else if (paper.checkOutcome() == 1) {
                    score++;
                    System.out.println("\nGood job! You won!\n" +
                            "Your score is: " + score + "\n" +
                            "The computer's score is: " + compScore + "\n");

                    // give user option to start another game when they win three rounds
                    if(score == 3){
                        userWin();
                    }
                // if user ties with computer, start another round using tie() method
                } else {
                    tie();
                }
                break;
            case 3:
                // call on scissors class if user chooses scissors
                Scissors scissors = new Scissors(cpuResponse);
                scissors.checkOutcome();

                // if user loses, increase computer's score
                if (scissors.checkOutcome() == 0) {
                    compScore++;
                    System.out.println("\nNuggets! The computer won!\n" +
                            "Your score is: " + score + "\n" +
                            "The computer's score is: " + compScore + "\n");

                    // give user option to start another game when the computer wins three rounds
                    if (compScore == 3) {
                        userLose();
                    }
                // if user wins, increase score
                } else if (scissors.checkOutcome() == 1) {
                    score++;
                    System.out.println("\nGood job! You won!\n" +
                            "Your score is: " + score + "\n" +
                            "The computer's score is: " + compScore + "\n");

                    // give user option to start another game when they win three rounds
                    if(score == 3){
                        userWin();
                    }
                // if user ties with computer, start another round using tie() method
                } else {
                    tie();
                }
                break;
        }
        startGame();
        return score;
    }

    public static void userWin(){
        roundsWon++;

        // reset scores
        score = 0;
        compScore = 0;

        // give user option to start new game
        System.out.println("\nCongrats! You've won! Do you want to play another round?\n" +
                "1. Yes\n" +
                "2. No");
        int choice = scanner.nextInt();
        switch (choice){
            case 1:
                System.out.println("\nOkay, starting another round!\n");
                System.out.println("*********************");
                System.out.println("Rounds won: " + roundsWon + "\n" +
                        "Round lost: " + roundsLost);
                System.out.println("*********************\n");
                startGame();
                break;
            case 2:
                System.out.println("\nOkay, see you next time! :)\n");
                System.out.println("*********************");
                System.out.println("Rounds won: " + roundsWon + "\n" +
                        "Round lost: " + roundsLost);
                System.out.println("*********************\n");
                System.exit(0);
                break;
        }
    }

    public static void userLose(){
        roundsLost++;

        // reset scores
        score = 0;
        compScore = 0;

        // give user option to start new game
        System.out.println("\nSorry! The computer won! Would you like to try again?\n" +
                "1. Yes\n" +
                "2. No");
        int choice = scanner.nextInt();
        switch(choice){
            case 1:
                System.out.println("\nOkay, starting another round!\n");
                System.out.println("*********************");
                System.out.println("Rounds won: " + roundsWon + "\n" +
                        "Round lost: " + roundsLost);
                System.out.println("*********************\n");
                startGame();
                break;
            case 2:
                System.out.println("\nOkay, see you next time! :)\n");
                System.out.println("*********************");
                System.out.println("Rounds won: " + roundsWon + "\n" +
                        "Round lost: " + roundsLost);
                System.out.println("*********************\n");
                System.exit(0);
                break;
        }
    }

    public static void tie(){
        System.out.println("\nLooks like you both tied! Try again.\n" +
                "Your score is: " + score + "\n" +
                "The computer's score is: " + compScore + "\n");
        startGame();
    }

    public static int getCPUResponse(){
        // Generate random integers in range 1 to 3
        Random comp = new Random();

        int randomCompNum = comp.nextInt(3) + 1;

        return randomCompNum;
    }
}